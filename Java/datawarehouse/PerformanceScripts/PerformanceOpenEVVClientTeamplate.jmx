<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">D:\workspace\inter-op_payer\datawarehouse\target</stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Environment Setting" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">dev-api.sandata.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Environment url &quot;qa-api.sandata.com&quot;</stringProp>
          </elementProp>
          <elementProp name="visitPath" elementType="Argument">
            <stringProp name="Argument.name">visitPath</stringProp>
            <stringProp name="Argument.value">/interfaces/intake/visits/rest/api/v1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="binPath" elementType="Argument">
            <stringProp name="Argument.name">binPath</stringProp>
            <stringProp name="Argument.value">./</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="initialIdCsvFileName" elementType="Argument">
            <stringProp name="Argument.name">initialIdCsvFileName</stringProp>
            <stringProp name="Argument.value">StartId.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="numberThread" elementType="Argument">
            <stringProp name="Argument.name">numberThread</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="numberRecordPerThread" elementType="Argument">
            <stringProp name="Argument.name">numberRecordPerThread</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rampUp" elementType="Argument">
            <stringProp name="Argument.name">rampUp</stringProp>
            <stringProp name="Argument.value">5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="request" elementType="Argument">
            <stringProp name="Argument.name">request</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="expected" elementType="Argument">
            <stringProp name="Argument.name">expected</stringProp>
            <stringProp name="Argument.value">false</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="timeOut" elementType="Argument">
            <stringProp name="Argument.name">timeOut</stringProp>
            <stringProp name="Argument.value">5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="expectedEmployeeRecords" elementType="Argument">
            <stringProp name="Argument.name">expectedEmployeeRecords</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="expectedClientRecords" elementType="Argument">
            <stringProp name="Argument.name">expectedClientRecords</stringProp>
            <stringProp name="Argument.value">5000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="expectedVisitRecords" elementType="Argument">
            <stringProp name="Argument.name">expectedVisitRecords</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sleep" elementType="Argument">
            <stringProp name="Argument.name">sleep</stringProp>
            <stringProp name="Argument.value">30000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="clientBody1" elementType="Argument">
            <stringProp name="Argument.name">clientBody1</stringProp>
            <stringProp name="Argument.value">${__FileToString(CLIENT_FILE_1.txt,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="clientBody2" elementType="Argument">
            <stringProp name="Argument.name">clientBody2</stringProp>
            <stringProp name="Argument.value">${__FileToString(CLIENT_FILE_2.txt,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="clientBody3" elementType="Argument">
            <stringProp name="Argument.name">clientBody3</stringProp>
            <stringProp name="Argument.value">${__FileToString(CLIENT_FILE_3.txt,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="clientBody4" elementType="Argument">
            <stringProp name="Argument.name">clientBody4</stringProp>
            <stringProp name="Argument.value">${__FileToString(CLIENT_FILE_4.txt,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="clientBody5" elementType="Argument">
            <stringProp name="Argument.name">clientBody5</stringProp>
            <stringProp name="Argument.value">${__FileToString(CLIENT_FILE_5.txt,,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="clientPrefix1" elementType="Argument">
            <stringProp name="Argument.name">clientPrefix1</stringProp>
            <stringProp name="Argument.value">CLIENT_FILE_1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="clientPrefix2" elementType="Argument">
            <stringProp name="Argument.name">clientPrefix2</stringProp>
            <stringProp name="Argument.value">CLIENT_FILE_2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="clientPrefix3" elementType="Argument">
            <stringProp name="Argument.name">clientPrefix3</stringProp>
            <stringProp name="Argument.value">CLIENT_FILE_3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="clientPrefix4" elementType="Argument">
            <stringProp name="Argument.name">clientPrefix4</stringProp>
            <stringProp name="Argument.value">CLIENT_FILE_4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="clientPrefix5" elementType="Argument">
            <stringProp name="Argument.name">clientPrefix5</stringProp>
            <stringProp name="Argument.value">CLIENT_FILE_5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration - QA" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">select 1 from dual</stringProp>
        <stringProp name="connectionAge">20000</stringProp>
        <stringProp name="dataSource">myDatabase</stringProp>
        <stringProp name="dbUrl">jdbc:oracle:thin:@stxqadb.sandata.com:1526:stxqa</stringProp>
        <stringProp name="driver">oracle.jdbc.OracleDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">Q2dn7MICb9$iHJ</stringProp>
        <stringProp name="poolMax">1</stringProp>
        <stringProp name="timeout">30000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">&quot;hoa.chau&quot;</stringProp>
        <stringProp name="initQuery"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list">
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url">https://qa-api.sandata.com</stringProp>
            <stringProp name="Authorization.username">Test@123456!</stringProp>
            <stringProp name="Authorization.password">Test@123456!</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
          </elementProp>
        </collectionProp>
      </AuthManager>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Account</stringProp>
            <stringProp name="Header.value">60473</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="[Setup] Initial startId and write to CSV" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.lang.*;

public void writeLine(FileWriter writer, String[] params, char separator) throws IOException {
        boolean firstParam = true;

        StringBuilder stringBuilder = new StringBuilder();
        String param = &quot;&quot;;

        for (int i = 0; i &lt; params.length; i++)
        {
            //get param
		  param = String.format(&quot;%s&quot;,new Object[]{params[i]});

            //if the first param in the line, separator is not needed
            if (!firstParam)
            {
                stringBuilder.append(separator);
            }

            //Add param to line
            stringBuilder.append(param);

            firstParam = false;
        }

        //add to file the line
        writer.write(stringBuilder.toString());
        writer.write(System.lineSeparator());
}

        //Default separator
        char separator = &apos;|&apos;;
        //get path of csv file
        String initialIdCsvFile = &quot;${binPath}${initialIdCsvFileName}&quot;;
        FileWriter fileWriterInitialId = new FileWriter(initialIdCsvFile, false);
	   int numThread = Integer.parseInt(vars.get(&quot;numberThread&quot;));
	   int numRecord = Integer.parseInt(vars.get(&quot;numberRecordPerThread&quot;));
	   int startId = 1;
        //Write header csv
//        String[] headers = {&quot;clientMedicalId&quot;};
//        writeLine(fileWriter, headers, separator);

        //Write body csv
        for (int i = 0; i&lt;numThread; i++){
		  String[] value = {Integer.toString(startId)};
		  startId += numRecord;
            writeLine(fileWriterInitialId, value, separator);
        }

        fileWriterInitialId.flush();
        fileWriterInitialId.close();</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Employee - Open EVV  - PA - Account 392528 (DEV)" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1501264800000</longProp>
        <longProp name="ThreadGroup.end_time">1501351200000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Declare Json Files" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-2051809241">employeeFile1</stringProp>
            <stringProp name="-2051809240">employeeFile2</stringProp>
            <stringProp name="-2051809239">employeeFile3</stringProp>
            <stringProp name="-2051809238">employeeFile4</stringProp>
            <stringProp name="-2051809237">employeeFile5</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-955874646">
              <stringProp name="1495076119">EmpPerbIJuReOswn.txt</stringProp>
              <stringProp name="-1143037757">EmpPerBZnfwPtuac.txt</stringProp>
              <stringProp name="-640205442">EmpPeriUcuTyPgta.txt</stringProp>
              <stringProp name="16480644">EmpPerOZyQbFsaia.txt</stringProp>
              <stringProp name="2024460366">EmpPervlupSFDWOo.txt</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://dev-api.sandata.com</stringProp>
              <stringProp name="Authorization.username">Sandata@12345</stringProp>
              <stringProp name="Authorization.password">Sandata@12345</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
        </AuthManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Account</stringProp>
              <stringProp name="Header.value">392528</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="threadCounter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">threadCounter</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Get Json Body for ${expectedEmployeeRecords} employee with FirstName ${employeePrefix}" enabled="true">
          <stringProp name="BeanShellSampler.query">

//${__counter(FALSE,&quot;globalCounter&quot;)};
log.info(vars.get(&quot;threadCounter&quot;));

String currentKey = &quot;employeePrefix&quot;+vars.get(&quot;threadCounter&quot;);
log.info(&quot;Current Key &quot; + currentKey);
String employeePrefix = vars.get(currentKey);
vars.put(&quot;employeePrefix&quot;, employeePrefix);
String employeeBody = vars.get(&quot;employeeBody&quot;+vars.get(&quot;threadCounter&quot;));
log.info(&quot;Read JsonBody from file:&quot; + employeeBody);
vars.put(&quot;employeeBody&quot;, employeeBody);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Get Json Body for ${expectedEmployeeRecords} employee - ${employeePrefix}" enabled="false">
          <stringProp name="BeanShellSampler.query">import org.apache.commons.io.FileUtils;

//${__counter(FALSE,&quot;globalCounter&quot;)};
log.info(vars.get(&quot;threadCounter&quot;));
log.info(&quot;Info-GlobalCount-&quot;+vars.getIteration());

String filePath = vars.get(&quot;employeeFile&quot;+vars.get(&quot;threadCounter&quot;));
log.info(&quot;Read JsonBody from file:&quot; + filePath);

vars.put(&quot;filePath&quot;, filePath);

log.info(vars.get(&quot;filePath&quot;));

${__FileToString(${__eval(vars.get(&quot;filePath&quot;))},,test)}
//String test = FileUtils.readFileToString(new File(filePath));</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PA - Account 392528 - Open EVV Import Employee" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
  {&#xd;
    &quot;Account&quot;: &quot;392528&quot;,&#xd;
    &quot;EmployeePIN&quot;: &quot;293568535&quot;,&#xd;
    &quot;EmployeeID&quot;: &quot;6158367&quot;,&#xd;
    &quot;Status&quot;: &quot;&quot;,&#xd;
    &quot;EmployeeEmailAddress&quot;: &quot;5730275204@mailinator.com&quot;,&#xd;
    &quot;EmployeeSocialSecurity&quot;: &quot;&quot;,&#xd;
    &quot;EmployeeIDCustom1&quot;: &quot;i152TB&quot;,&#xd;
    &quot;EmployeeIDCustom2&quot;: &quot;tlvyWN&quot;,&#xd;
    &quot;EmployeeHireDate&quot;: &quot;2019-12-12&quot;,&#xd;
    &quot;EmployeeEndDate&quot;: &quot;2019-12-12&quot;,&#xd;
    &quot;EmployeeLastName&quot;: &quot;AutoAbFqNiygPf&quot;,&#xd;
    &quot;EmployeeFirstName&quot;: &quot;EmpPerXVyLMeaaFA&quot;,&#xd;
    &quot;EmployeeMiddleInitial&quot;: &quot;A&quot;,&#xd;
    &quot;Department&quot;: &quot;ABC&quot;,&#xd;
    &quot;EmployeeType&quot;: &quot;&quot;,&#xd;
    &quot;Discipline&quot;: &quot;Value&quot;,&#xd;
    &quot;EmployeeAddress1&quot;: &quot;1 Road&quot;,&#xd;
    &quot;EmployeeAddress2&quot;: &quot;Apartment Two for Employee add&quot;,&#xd;
    &quot;EmployeeCity&quot;: &quot;New York&quot;,&#xd;
    &quot;EmployeeState&quot;: &quot;NY&quot;,&#xd;
    &quot;EmployeeZipCode&quot;: &quot;11109-9888&quot;,&#xd;
    &quot;EmployeePhone&quot;: &quot;0563852045&quot;,&#xd;
    &quot;EmployeeAltPhone&quot;: &quot;6112435354&quot;,&#xd;
    &quot;EmployeeAltPhone2&quot;: &quot;6432831438&quot;,&#xd;
    &quot;PayRate&quot;: &quot;23.76&quot;,&#xd;
    &quot;EmployeeBirthDate&quot;: &quot;2010-12-12&quot;,&#xd;
    &quot;EmployeeGender&quot;: &quot;M&quot;,&#xd;
    &quot;EmployeePrimaryLocation&quot;: &quot;Location Queens&quot;&#xd;
  },&#xd;
  {&#xd;
    &quot;Account&quot;: &quot;392528&quot;,&#xd;
    &quot;EmployeePIN&quot;: &quot;431364937&quot;,&#xd;
    &quot;EmployeeID&quot;: &quot;9787567&quot;,&#xd;
    &quot;Status&quot;: &quot;&quot;,&#xd;
    &quot;EmployeeEmailAddress&quot;: &quot;2803689551@mailinator.com&quot;,&#xd;
    &quot;EmployeeSocialSecurity&quot;: &quot;&quot;,&#xd;
    &quot;EmployeeIDCustom1&quot;: &quot;dbmuFi&quot;,&#xd;
    &quot;EmployeeIDCustom2&quot;: &quot;3ep3EF&quot;,&#xd;
    &quot;EmployeeHireDate&quot;: &quot;2019-12-12&quot;,&#xd;
    &quot;EmployeeEndDate&quot;: &quot;2019-12-12&quot;,&#xd;
    &quot;EmployeeLastName&quot;: &quot;AutooWRJYkzbRq&quot;,&#xd;
    &quot;EmployeeFirstName&quot;: &quot;EmpPerXVyLMeaaFA&quot;,&#xd;
    &quot;EmployeeMiddleInitial&quot;: &quot;A&quot;,&#xd;
    &quot;Department&quot;: &quot;ABC&quot;,&#xd;
    &quot;EmployeeType&quot;: &quot;&quot;,&#xd;
    &quot;Discipline&quot;: &quot;Value&quot;,&#xd;
    &quot;EmployeeAddress1&quot;: &quot;1 Road&quot;,&#xd;
    &quot;EmployeeAddress2&quot;: &quot;Apartment Two for Employee add&quot;,&#xd;
    &quot;EmployeeCity&quot;: &quot;New York&quot;,&#xd;
    &quot;EmployeeState&quot;: &quot;NY&quot;,&#xd;
    &quot;EmployeeZipCode&quot;: &quot;11109-9888&quot;,&#xd;
    &quot;EmployeePhone&quot;: &quot;4865021042&quot;,&#xd;
    &quot;EmployeeAltPhone&quot;: &quot;2544977876&quot;,&#xd;
    &quot;EmployeeAltPhone2&quot;: &quot;8528245486&quot;,&#xd;
    &quot;PayRate&quot;: &quot;23.76&quot;,&#xd;
    &quot;EmployeeBirthDate&quot;: &quot;2010-12-12&quot;,&#xd;
    &quot;EmployeeGender&quot;: &quot;M&quot;,&#xd;
    &quot;EmployeePrimaryLocation&quot;: &quot;Location Queens&quot;&#xd;
  },&#xd;
  {&#xd;
    &quot;Account&quot;: &quot;392528&quot;,&#xd;
    &quot;EmployeePIN&quot;: &quot;744275863&quot;,&#xd;
    &quot;EmployeeID&quot;: &quot;3990702&quot;,&#xd;
    &quot;Status&quot;: &quot;&quot;,&#xd;
    &quot;EmployeeEmailAddress&quot;: &quot;8492641222@mailinator.com&quot;,&#xd;
    &quot;EmployeeSocialSecurity&quot;: &quot;&quot;,&#xd;
    &quot;EmployeeIDCustom1&quot;: &quot;o9Gqss&quot;,&#xd;
    &quot;EmployeeIDCustom2&quot;: &quot;EzxH5R&quot;,&#xd;
    &quot;EmployeeHireDate&quot;: &quot;2019-12-12&quot;,&#xd;
    &quot;EmployeeEndDate&quot;: &quot;2019-12-12&quot;,&#xd;
    &quot;EmployeeLastName&quot;: &quot;AutoUIHurQHAsv&quot;,&#xd;
    &quot;EmployeeFirstName&quot;: &quot;EmpPerXVyLMeaaFA&quot;,&#xd;
    &quot;EmployeeMiddleInitial&quot;: &quot;A&quot;,&#xd;
    &quot;Department&quot;: &quot;ABC&quot;,&#xd;
    &quot;EmployeeType&quot;: &quot;&quot;,&#xd;
    &quot;Discipline&quot;: &quot;Value&quot;,&#xd;
    &quot;EmployeeAddress1&quot;: &quot;1 Road&quot;,&#xd;
    &quot;EmployeeAddress2&quot;: &quot;Apartment Two for Employee add&quot;,&#xd;
    &quot;EmployeeCity&quot;: &quot;New York&quot;,&#xd;
    &quot;EmployeeState&quot;: &quot;NY&quot;,&#xd;
    &quot;EmployeeZipCode&quot;: &quot;11109-9888&quot;,&#xd;
    &quot;EmployeePhone&quot;: &quot;8597332654&quot;,&#xd;
    &quot;EmployeeAltPhone&quot;: &quot;9539939394&quot;,&#xd;
    &quot;EmployeeAltPhone2&quot;: &quot;6710344142&quot;,&#xd;
    &quot;PayRate&quot;: &quot;23.76&quot;,&#xd;
    &quot;EmployeeBirthDate&quot;: &quot;2010-12-12&quot;,&#xd;
    &quot;EmployeeGender&quot;: &quot;M&quot;,&#xd;
    &quot;EmployeePrimaryLocation&quot;: &quot;Location Queens&quot;&#xd;
  },&#xd;
  {&#xd;
    &quot;Account&quot;: &quot;392528&quot;,&#xd;
    &quot;EmployeePIN&quot;: &quot;449666053&quot;,&#xd;
    &quot;EmployeeID&quot;: &quot;0024620&quot;,&#xd;
    &quot;Status&quot;: &quot;&quot;,&#xd;
    &quot;EmployeeEmailAddress&quot;: &quot;7501587290@mailinator.com&quot;,&#xd;
    &quot;EmployeeSocialSecurity&quot;: &quot;&quot;,&#xd;
    &quot;EmployeeIDCustom1&quot;: &quot;h31aoj&quot;,&#xd;
    &quot;EmployeeIDCustom2&quot;: &quot;sIzmvl&quot;,&#xd;
    &quot;EmployeeHireDate&quot;: &quot;2019-12-12&quot;,&#xd;
    &quot;EmployeeEndDate&quot;: &quot;2019-12-12&quot;,&#xd;
    &quot;EmployeeLastName&quot;: &quot;AutoLZWfXuZgby&quot;,&#xd;
    &quot;EmployeeFirstName&quot;: &quot;EmpPerXVyLMeaaFA&quot;,&#xd;
    &quot;EmployeeMiddleInitial&quot;: &quot;A&quot;,&#xd;
    &quot;Department&quot;: &quot;ABC&quot;,&#xd;
    &quot;EmployeeType&quot;: &quot;&quot;,&#xd;
    &quot;Discipline&quot;: &quot;Value&quot;,&#xd;
    &quot;EmployeeAddress1&quot;: &quot;1 Road&quot;,&#xd;
    &quot;EmployeeAddress2&quot;: &quot;Apartment Two for Employee add&quot;,&#xd;
    &quot;EmployeeCity&quot;: &quot;New York&quot;,&#xd;
    &quot;EmployeeState&quot;: &quot;NY&quot;,&#xd;
    &quot;EmployeeZipCode&quot;: &quot;11109-9888&quot;,&#xd;
    &quot;EmployeePhone&quot;: &quot;0883821905&quot;,&#xd;
    &quot;EmployeeAltPhone&quot;: &quot;1262239731&quot;,&#xd;
    &quot;EmployeeAltPhone2&quot;: &quot;0553961332&quot;,&#xd;
    &quot;PayRate&quot;: &quot;23.76&quot;,&#xd;
    &quot;EmployeeBirthDate&quot;: &quot;2010-12-12&quot;,&#xd;
    &quot;EmployeeGender&quot;: &quot;M&quot;,&#xd;
    &quot;EmployeePrimaryLocation&quot;: &quot;Location Queens&quot;&#xd;
  },&#xd;
  {&#xd;
    &quot;Account&quot;: &quot;392528&quot;,&#xd;
    &quot;EmployeePIN&quot;: &quot;864834230&quot;,&#xd;
    &quot;EmployeeID&quot;: &quot;4193872&quot;,&#xd;
    &quot;Status&quot;: &quot;&quot;,&#xd;
    &quot;EmployeeEmailAddress&quot;: &quot;5852405990@mailinator.com&quot;,&#xd;
    &quot;EmployeeSocialSecurity&quot;: &quot;&quot;,&#xd;
    &quot;EmployeeIDCustom1&quot;: &quot;sWHdI8&quot;,&#xd;
    &quot;EmployeeIDCustom2&quot;: &quot;ZaItTu&quot;,&#xd;
    &quot;EmployeeHireDate&quot;: &quot;2019-12-12&quot;,&#xd;
    &quot;EmployeeEndDate&quot;: &quot;2019-12-12&quot;,&#xd;
    &quot;EmployeeLastName&quot;: &quot;AutoUIDVcWvPVX&quot;,&#xd;
    &quot;EmployeeFirstName&quot;: &quot;EmpPerXVyLMeaaFA&quot;,&#xd;
    &quot;EmployeeMiddleInitial&quot;: &quot;A&quot;,&#xd;
    &quot;Department&quot;: &quot;ABC&quot;,&#xd;
    &quot;EmployeeType&quot;: &quot;&quot;,&#xd;
    &quot;Discipline&quot;: &quot;Value&quot;,&#xd;
    &quot;EmployeeAddress1&quot;: &quot;1 Road&quot;,&#xd;
    &quot;EmployeeAddress2&quot;: &quot;Apartment Two for Employee add&quot;,&#xd;
    &quot;EmployeeCity&quot;: &quot;New York&quot;,&#xd;
    &quot;EmployeeState&quot;: &quot;NY&quot;,&#xd;
    &quot;EmployeeZipCode&quot;: &quot;11109-9888&quot;,&#xd;
    &quot;EmployeePhone&quot;: &quot;2097338985&quot;,&#xd;
    &quot;EmployeeAltPhone&quot;: &quot;5534053938&quot;,&#xd;
    &quot;EmployeeAltPhone2&quot;: &quot;4643975760&quot;,&#xd;
    &quot;PayRate&quot;: &quot;23.76&quot;,&#xd;
    &quot;EmployeeBirthDate&quot;: &quot;2010-12-12&quot;,&#xd;
    &quot;EmployeeGender&quot;: &quot;M&quot;,&#xd;
    &quot;EmployeePrimaryLocation&quot;: &quot;Location Queens&quot;&#xd;
  },&#xd;
  {&#xd;
    &quot;Account&quot;: &quot;392528&quot;,&#xd;
    &quot;EmployeePIN&quot;: &quot;226769625&quot;,&#xd;
    &quot;EmployeeID&quot;: &quot;4188834&quot;,&#xd;
    &quot;Status&quot;: &quot;&quot;,&#xd;
    &quot;EmployeeEmailAddress&quot;: &quot;4833146434@mailinator.com&quot;,&#xd;
    &quot;EmployeeSocialSecurity&quot;: &quot;&quot;,&#xd;
    &quot;EmployeeIDCustom1&quot;: &quot;lG1CH3&quot;,&#xd;
    &quot;EmployeeIDCustom2&quot;: &quot;Q1cAWz&quot;,&#xd;
    &quot;EmployeeHireDate&quot;: &quot;2019-12-12&quot;,&#xd;
    &quot;EmployeeEndDate&quot;: &quot;2019-12-12&quot;,&#xd;
    &quot;EmployeeLastName&quot;: &quot;AutofsinQvMYek&quot;,&#xd;
    &quot;EmployeeFirstName&quot;: &quot;EmpPerXVyLMeaaFA&quot;,&#xd;
    &quot;EmployeeMiddleInitial&quot;: &quot;A&quot;,&#xd;
    &quot;Department&quot;: &quot;ABC&quot;,&#xd;
    &quot;EmployeeType&quot;: &quot;&quot;,&#xd;
    &quot;Discipline&quot;: &quot;Value&quot;,&#xd;
    &quot;EmployeeAddress1&quot;: &quot;1 Road&quot;,&#xd;
    &quot;EmployeeAddress2&quot;: &quot;Apartment Two for Employee add&quot;,&#xd;
    &quot;EmployeeCity&quot;: &quot;New York&quot;,&#xd;
    &quot;EmployeeState&quot;: &quot;NY&quot;,&#xd;
    &quot;EmployeeZipCode&quot;: &quot;11109-9888&quot;,&#xd;
    &quot;EmployeePhone&quot;: &quot;0095958615&quot;,&#xd;
    &quot;EmployeeAltPhone&quot;: &quot;0187698897&quot;,&#xd;
    &quot;EmployeeAltPhone2&quot;: &quot;0525918107&quot;,&#xd;
    &quot;PayRate&quot;: &quot;23.76&quot;,&#xd;
    &quot;EmployeeBirthDate&quot;: &quot;2010-12-12&quot;,&#xd;
    &quot;EmployeeGender&quot;: &quot;M&quot;,&#xd;
    &quot;EmployeePrimaryLocation&quot;: &quot;Location Queens&quot;&#xd;
  },&#xd;
  {&#xd;
    &quot;Account&quot;: &quot;392528&quot;,&#xd;
    &quot;EmployeePIN&quot;: &quot;780020935&quot;,&#xd;
    &quot;EmployeeID&quot;: &quot;3941280&quot;,&#xd;
    &quot;Status&quot;: &quot;&quot;,&#xd;
    &quot;EmployeeEmailAddress&quot;: &quot;0388126383@mailinator.com&quot;,&#xd;
    &quot;EmployeeSocialSecurity&quot;: &quot;&quot;,&#xd;
    &quot;EmployeeIDCustom1&quot;: &quot;LXKgu2&quot;,&#xd;
    &quot;EmployeeIDCustom2&quot;: &quot;nNyZdJ&quot;,&#xd;
    &quot;EmployeeHireDate&quot;: &quot;2019-12-12&quot;,&#xd;
    &quot;EmployeeEndDate&quot;: &quot;2019-12-12&quot;,&#xd;
    &quot;EmployeeLastName&quot;: &quot;AutoARjAHUywic&quot;,&#xd;
    &quot;EmployeeFirstName&quot;: &quot;EmpPerXVyLMeaaFA&quot;,&#xd;
    &quot;EmployeeMiddleInitial&quot;: &quot;A&quot;,&#xd;
    &quot;Department&quot;: &quot;ABC&quot;,&#xd;
    &quot;EmployeeType&quot;: &quot;&quot;,&#xd;
    &quot;Discipline&quot;: &quot;Value&quot;,&#xd;
    &quot;EmployeeAddress1&quot;: &quot;1 Road&quot;,&#xd;
    &quot;EmployeeAddress2&quot;: &quot;Apartment Two for Employee add&quot;,&#xd;
    &quot;EmployeeCity&quot;: &quot;New York&quot;,&#xd;
    &quot;EmployeeState&quot;: &quot;NY&quot;,&#xd;
    &quot;EmployeeZipCode&quot;: &quot;11109-9888&quot;,&#xd;
    &quot;EmployeePhone&quot;: &quot;8265639347&quot;,&#xd;
    &quot;EmployeeAltPhone&quot;: &quot;7779997807&quot;,&#xd;
    &quot;EmployeeAltPhone2&quot;: &quot;9208742028&quot;,&#xd;
    &quot;PayRate&quot;: &quot;23.76&quot;,&#xd;
    &quot;EmployeeBirthDate&quot;: &quot;2010-12-12&quot;,&#xd;
    &quot;EmployeeGender&quot;: &quot;M&quot;,&#xd;
    &quot;EmployeePrimaryLocation&quot;: &quot;Location Queens&quot;&#xd;
  },&#xd;
  {&#xd;
    &quot;Account&quot;: &quot;392528&quot;,&#xd;
    &quot;EmployeePIN&quot;: &quot;151163602&quot;,&#xd;
    &quot;EmployeeID&quot;: &quot;5616574&quot;,&#xd;
    &quot;Status&quot;: &quot;&quot;,&#xd;
    &quot;EmployeeEmailAddress&quot;: &quot;4210545731@mailinator.com&quot;,&#xd;
    &quot;EmployeeSocialSecurity&quot;: &quot;&quot;,&#xd;
    &quot;EmployeeIDCustom1&quot;: &quot;OW8VCK&quot;,&#xd;
    &quot;EmployeeIDCustom2&quot;: &quot;sWagbJ&quot;,&#xd;
    &quot;EmployeeHireDate&quot;: &quot;2019-12-12&quot;,&#xd;
    &quot;EmployeeEndDate&quot;: &quot;2019-12-12&quot;,&#xd;
    &quot;EmployeeLastName&quot;: &quot;AutojKjJbQlZqW&quot;,&#xd;
    &quot;EmployeeFirstName&quot;: &quot;EmpPerXVyLMeaaFA&quot;,&#xd;
    &quot;EmployeeMiddleInitial&quot;: &quot;A&quot;,&#xd;
    &quot;Department&quot;: &quot;ABC&quot;,&#xd;
    &quot;EmployeeType&quot;: &quot;&quot;,&#xd;
    &quot;Discipline&quot;: &quot;Value&quot;,&#xd;
    &quot;EmployeeAddress1&quot;: &quot;1 Road&quot;,&#xd;
    &quot;EmployeeAddress2&quot;: &quot;Apartment Two for Employee add&quot;,&#xd;
    &quot;EmployeeCity&quot;: &quot;New York&quot;,&#xd;
    &quot;EmployeeState&quot;: &quot;NY&quot;,&#xd;
    &quot;EmployeeZipCode&quot;: &quot;11109-9888&quot;,&#xd;
    &quot;EmployeePhone&quot;: &quot;6124451704&quot;,&#xd;
    &quot;EmployeeAltPhone&quot;: &quot;7311696363&quot;,&#xd;
    &quot;EmployeeAltPhone2&quot;: &quot;6632747354&quot;,&#xd;
    &quot;PayRate&quot;: &quot;23.76&quot;,&#xd;
    &quot;EmployeeBirthDate&quot;: &quot;2010-12-12&quot;,&#xd;
    &quot;EmployeeGender&quot;: &quot;M&quot;,&#xd;
    &quot;EmployeePrimaryLocation&quot;: &quot;Location Queens&quot;&#xd;
  },&#xd;
  {&#xd;
    &quot;Account&quot;: &quot;392528&quot;,&#xd;
    &quot;EmployeePIN&quot;: &quot;803589983&quot;,&#xd;
    &quot;EmployeeID&quot;: &quot;7717561&quot;,&#xd;
    &quot;Status&quot;: &quot;&quot;,&#xd;
    &quot;EmployeeEmailAddress&quot;: &quot;0550075187@mailinator.com&quot;,&#xd;
    &quot;EmployeeSocialSecurity&quot;: &quot;&quot;,&#xd;
    &quot;EmployeeIDCustom1&quot;: &quot;z0RMqP&quot;,&#xd;
    &quot;EmployeeIDCustom2&quot;: &quot;TlCC1A&quot;,&#xd;
    &quot;EmployeeHireDate&quot;: &quot;2019-12-12&quot;,&#xd;
    &quot;EmployeeEndDate&quot;: &quot;2019-12-12&quot;,&#xd;
    &quot;EmployeeLastName&quot;: &quot;AutoPnZQPMfXQI&quot;,&#xd;
    &quot;EmployeeFirstName&quot;: &quot;EmpPerXVyLMeaaFA&quot;,&#xd;
    &quot;EmployeeMiddleInitial&quot;: &quot;A&quot;,&#xd;
    &quot;Department&quot;: &quot;ABC&quot;,&#xd;
    &quot;EmployeeType&quot;: &quot;&quot;,&#xd;
    &quot;Discipline&quot;: &quot;Value&quot;,&#xd;
    &quot;EmployeeAddress1&quot;: &quot;1 Road&quot;,&#xd;
    &quot;EmployeeAddress2&quot;: &quot;Apartment Two for Employee add&quot;,&#xd;
    &quot;EmployeeCity&quot;: &quot;New York&quot;,&#xd;
    &quot;EmployeeState&quot;: &quot;NY&quot;,&#xd;
    &quot;EmployeeZipCode&quot;: &quot;11109-9888&quot;,&#xd;
    &quot;EmployeePhone&quot;: &quot;5585388490&quot;,&#xd;
    &quot;EmployeeAltPhone&quot;: &quot;0886704891&quot;,&#xd;
    &quot;EmployeeAltPhone2&quot;: &quot;6024056674&quot;,&#xd;
    &quot;PayRate&quot;: &quot;23.76&quot;,&#xd;
    &quot;EmployeeBirthDate&quot;: &quot;2010-12-12&quot;,&#xd;
    &quot;EmployeeGender&quot;: &quot;M&quot;,&#xd;
    &quot;EmployeePrimaryLocation&quot;: &quot;Location Queens&quot;&#xd;
  },&#xd;
  {&#xd;
    &quot;Account&quot;: &quot;392528&quot;,&#xd;
    &quot;EmployeePIN&quot;: &quot;329091431&quot;,&#xd;
    &quot;EmployeeID&quot;: &quot;8459849&quot;,&#xd;
    &quot;Status&quot;: &quot;&quot;,&#xd;
    &quot;EmployeeEmailAddress&quot;: &quot;5245394256@mailinator.com&quot;,&#xd;
    &quot;EmployeeSocialSecurity&quot;: &quot;&quot;,&#xd;
    &quot;EmployeeIDCustom1&quot;: &quot;2g83i9&quot;,&#xd;
    &quot;EmployeeIDCustom2&quot;: &quot;1LS7kT&quot;,&#xd;
    &quot;EmployeeHireDate&quot;: &quot;2019-12-12&quot;,&#xd;
    &quot;EmployeeEndDate&quot;: &quot;2019-12-12&quot;,&#xd;
    &quot;EmployeeLastName&quot;: &quot;AutoZaLvIOKpeE&quot;,&#xd;
    &quot;EmployeeFirstName&quot;: &quot;EmpPerXVyLMeaaFA&quot;,&#xd;
    &quot;EmployeeMiddleInitial&quot;: &quot;A&quot;,&#xd;
    &quot;Department&quot;: &quot;ABC&quot;,&#xd;
    &quot;EmployeeType&quot;: &quot;&quot;,&#xd;
    &quot;Discipline&quot;: &quot;Value&quot;,&#xd;
    &quot;EmployeeAddress1&quot;: &quot;1 Road&quot;,&#xd;
    &quot;EmployeeAddress2&quot;: &quot;Apartment Two for Employee add&quot;,&#xd;
    &quot;EmployeeCity&quot;: &quot;New York&quot;,&#xd;
    &quot;EmployeeState&quot;: &quot;NY&quot;,&#xd;
    &quot;EmployeeZipCode&quot;: &quot;11109-9888&quot;,&#xd;
    &quot;EmployeePhone&quot;: &quot;0015810749&quot;,&#xd;
    &quot;EmployeeAltPhone&quot;: &quot;8345315126&quot;,&#xd;
    &quot;EmployeeAltPhone2&quot;: &quot;8862592305&quot;,&#xd;
    &quot;PayRate&quot;: &quot;23.76&quot;,&#xd;
    &quot;EmployeeBirthDate&quot;: &quot;2010-12-12&quot;,&#xd;
    &quot;EmployeeGender&quot;: &quot;M&quot;,&#xd;
    &quot;EmployeePrimaryLocation&quot;: &quot;Location Queens&quot;&#xd;
  }&#xd;
]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">dev-api.sandata.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">interfaces/intake/employees/generic.rest/api/v1/evv</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status Success" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1783789965">&quot;status&quot;: &quot;SUCCESS&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PA - Verify Open EVV Employee Are Inserted to DB" enabled="false">
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Verify records insert to DB" enabled="true">
            <stringProp name="WhileController.condition">${__javaScript(vars.get(&quot;expected&quot;)!=&quot;true&quot; &amp;&amp; parseInt(vars.get(&quot;timeOut&quot;))&gt;0)}</stringProp>
          </WhileController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
              <stringProp name="dataSource">myDatabase</stringProp>
              <stringProp name="query">SELECT count(*) as CountNum 
FROM STX.workers workers 
LEFT JOIN STX.Accounts_Interfaces accinf ON accinf.ACCOUNT = workers.ACCOUNT 
LEFT JOIN STX.workers_supp workers_supp ON workers_supp.WORKERKEY = workers.WORKERKEY 
WHERE workers.f_name = &apos;EmpPerXVyLMeaaFA&apos; AND workers.ACCOUNT = &apos;392528&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as Object</stringProp>
              <stringProp name="resultVariable">rsClient</stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Verify existing" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.lang.*;
int expectedMemRecords = Integer.parseInt(vars.get(&quot;expectedEmployeeRecords&quot;));

int timeout = Integer.parseInt(vars.get(&quot;timeOut&quot;));
timeout--;
vars.put(&quot;timeOut&quot;,timeout.toString());

String result = vars.get(&quot;rsClient&quot;);
log.info(&quot;Debug------------&gt;&quot;+result);

String actualMemRecords = result.replace(&quot;[{COUNTNUM=&quot;,&quot;&quot;).replace(&quot;}]&quot;,&quot;&quot;);
log.info(&quot;Debug------------&gt;&quot;+actualMemRecords);
vars.put(&quot;actualMemRecords&quot;,String.valueOf(actualMemRecords));
log.info(&quot;Debug -----------&gt; TimeOut :&quot;+vars.get(&quot;timeOut&quot;) + &quot; / Actual Client Records :&quot;+actualMemRecords + &quot; should be greater or equal Expected Records :&quot;+vars.get(&quot;expectedMemRecords&quot;));

if(Integer.parseInt(actualMemRecords)&gt;=expectedMemRecords)vars.put(&quot;expected&quot;,&quot;true&quot;);


</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${sleep}</stringProp>
              </ConstantTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Set Ignore Result Status Of This Sampler In Loop" enabled="true">
                <collectionProp name="Asserion.test_strings"/>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Verify DB" enabled="true">
            <stringProp name="BeanShellSampler.query"></stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">String expected = vars.get(&quot;expected&quot;);
String errorMesssage = &quot;Debug -----------&gt; Data is not imported fully to DB: &quot; + &quot; / Actual Client Records :&quot; + vars.get(&quot;actualMemRecords&quot;) + &quot; should be greater or equal Expected Records :&quot;+vars.get(&quot;expectedMemRecords&quot;);
if(expected.equals(&quot;true&quot;)){
		Failure=false;
}
else{
		SampleResult.setResponseCode(&quot;205&quot;);
		Failure=true;
		FailureMessage  = errorMesssage;
    }</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Client  - Open EVV  - PA - Account 60473 (QA)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1501264800000</longProp>
        <longProp name="ThreadGroup.end_time">1501351200000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="threadCounter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">threadCounter</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Get FirstName of ThreadCount ${threadCounter}" enabled="true">
          <stringProp name="BeanShellSampler.query">//${__counter(FALSE,&quot;globalCounter&quot;)};
log.info(vars.get(&quot;threadCounter&quot;));

String currentKey = &quot;clientPrefix&quot;+vars.get(&quot;threadCounter&quot;);
log.info(&quot;Current Key &quot; + currentKey);
String clientPrefix = vars.get(currentKey);
vars.put(&quot;clientPrefix&quot;, clientPrefix);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Get Json Body for ${expectedClientRecords} clients with FirstName ${clientPrefix}" enabled="true">
          <stringProp name="BeanShellSampler.query">

//${__counter(FALSE,&quot;globalCounter&quot;)};
log.info(vars.get(&quot;threadCounter&quot;));

String clientBodyKey = &quot;clientBody&quot;+vars.get(&quot;threadCounter&quot;);
log.info(&quot;clientBody Key &quot; + clientBodyKey);
String clientBody = vars.get(clientBodyKey);
log.info(&quot;Read JsonBody from file:&quot; + clientBody);
vars.put(&quot;clientBody&quot;, clientBody);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PA - Account 60473 - Open EVV Import Client" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${clientBody}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">qa-api.sandata.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">interfaces/intake/clients/generic.rest/api/v1/evv</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status Success" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1783789965">&quot;status&quot;: &quot;SUCCESS&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PA - Verify Open EVV Client  Are Inserted to DB" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Verify records insert to DB" enabled="true">
            <stringProp name="WhileController.condition">${__javaScript(vars.get(&quot;expected&quot;)!=&quot;true&quot; &amp;&amp; parseInt(vars.get(&quot;timeOut&quot;))&gt;0)}</stringProp>
          </WhileController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
              <stringProp name="dataSource">myDatabase</stringProp>
              <stringProp name="query">SELECT count(*) as CountNum  FROM stx.CLIENTS WHERE ACCOUNT = &apos;60473&apos; AND F_NAME = &apos;${clientPrefix}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as Object</stringProp>
              <stringProp name="resultVariable">rsClient</stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Verify existing" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.lang.*;
int expectedClientRecords = Integer.parseInt(vars.get(&quot;expectedClientRecords&quot;));
int timeout = Integer.parseInt(vars.get(&quot;timeOut&quot;));
timeout--;
vars.put(&quot;timeOut&quot;,timeout.toString());
String result = vars.get(&quot;rsClient&quot;);
String actualClientRecords = result.replace(&quot;[{COUNTNUM=&quot;,&quot;&quot;).replace(&quot;}]&quot;,&quot;&quot;);
if(Integer.parseInt(actualClientRecords)&gt;=expectedClientRecords)vars.put(&quot;expected&quot;,&quot;true&quot;);


</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${sleep}</stringProp>
              </ConstantTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Set Ignore Result Status Of This Sampler In Loop" enabled="false">
                <collectionProp name="Asserion.test_strings"/>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Verify DB" enabled="true">
            <stringProp name="BeanShellSampler.query"></stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">String expected = vars.get(&quot;expected&quot;);
String errorMesssage = &quot;Debug -----------&gt; Data is not imported fully to DB: &quot; + &quot; / Actual Client Records :&quot; + vars.get(&quot;actualMemRecords&quot;) + &quot; should be greater or equal Expected Records :&quot;+vars.get(&quot;expectedMemRecords&quot;);
if(expected.equals(&quot;true&quot;)){
		Failure=false;
}
else{
		SampleResult.setResponseCode(&quot;205&quot;);
		Failure=true;
		FailureMessage  = errorMesssage;
    }</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySamplerProperties">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugPostProcessor>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Visit  - Open EVV  - PA - Account 60138 (DEV)" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1501264800000</longProp>
        <longProp name="ThreadGroup.end_time">1501351200000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://dev-api.sandata.com</stringProp>
              <stringProp name="Authorization.username">Sandata@12345</stringProp>
              <stringProp name="Authorization.password">Sandata@12345</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
        </AuthManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Account</stringProp>
              <stringProp name="Header.value">392528</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PA - Account 60138 - Open EVV Import Visit" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
  {&#xd;
    &quot;ProviderIdentification&quot;: {&#xd;
      &quot;ProviderID&quot;: &quot;102802407&quot;,&#xd;
      &quot;ProviderQualifier&quot;: &quot;MedicaidID&quot;&#xd;
    },&#xd;
    &quot;VisitOtherID&quot;: &quot;OSOB42QY62CMEV86CE2IOI74DHNC9TKN10X507TEI52GJQ6YFK&quot;,&#xd;
    &quot;SequenceID&quot;: &quot;2019110112290622&quot;,&#xd;
    &quot;EmployeeIdentifier&quot;: &quot;T2qjKJ&quot;,&#xd;
    &quot;EmployeeQualifier&quot;: &quot;EmployeeCustomID&quot;,&#xd;
    &quot;ClientID&quot;: &quot;866234531&quot;,&#xd;
    &quot;ClientIDQualifier&quot;: &quot;ClientCustomID&quot;,&#xd;
    &quot;VisitCancelledIndicator&quot;: &quot;false&quot;,&#xd;
    &quot;PayerID&quot;: &quot;PAODP&quot;,&#xd;
    &quot;PayerProgram&quot;: &quot;ODP&quot;,&#xd;
    &quot;ProcedureCode&quot;: &quot;W1724&quot;,&#xd;
    &quot;VisitTimeZone&quot;: &quot;US/Eastern&quot;,&#xd;
    &quot;ScheduleStartTime&quot;: &quot;2019-10-31T12:29:06Z&quot;,&#xd;
    &quot;ScheduleEndTime&quot;: &quot;2019-10-31T12:49:06Z&quot;,&#xd;
    &quot;BillVisit&quot;: &quot;true&quot;,&#xd;
    &quot;HoursToBill&quot;: &quot;10&quot;,&#xd;
    &quot;HoursToPay&quot;: &quot;10&quot;,&#xd;
    &quot;Memo&quot;: &quot;ViPerP9B6HGKAKZ4GK75IFYOGE73964FWXP12I7GLTZFOSML2TOPH5P&quot;,&#xd;
    &quot;ClientVerifiedTimes&quot;: &quot;true&quot;,&#xd;
    &quot;ClientVerifiedTasks&quot;: &quot;true&quot;,&#xd;
    &quot;ClientVerifiedService&quot;: &quot;true&quot;,&#xd;
    &quot;ClientSignatureAvailable&quot;: &quot;true&quot;,&#xd;
    &quot;ClientVoiceRecording&quot;: &quot;true&quot;,&#xd;
    &quot;Calls&quot;: [&#xd;
      {&#xd;
        &quot;CallExternalID&quot;: &quot;58816118&quot;,&#xd;
        &quot;CallDateTime&quot;: &quot;2019-10-31T12:39:06Z&quot;,&#xd;
        &quot;CallAssignment&quot;: &quot;Time In&quot;,&#xd;
        &quot;CallType&quot;: &quot;Other&quot;,&#xd;
        &quot;ProcedureCode&quot;: &quot;W1724&quot;,&#xd;
        &quot;ClientIdentifierOnCall&quot;: &quot;98733222&quot;,&#xd;
        &quot;MobileLogin&quot;: &quot;98733222&quot;,&#xd;
        &quot;CallLatitude&quot;: &quot;40.34455&quot;,&#xd;
        &quot;CallLongitude&quot;: &quot;-21.99383&quot;,&#xd;
        &quot;Location&quot;: &quot;123&quot;,&#xd;
        &quot;TelephonyPIN&quot;: &quot;9989999&quot;,&#xd;
        &quot;OriginatingPhoneNumber&quot;: &quot;2125551212&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;CallExternalID&quot;: &quot;81657317&quot;,&#xd;
        &quot;CallDateTime&quot;: &quot;2019-10-31T12:44:06Z&quot;,&#xd;
        &quot;CallAssignment&quot;: &quot;Time Out&quot;,&#xd;
        &quot;CallType&quot;: &quot;Other&quot;,&#xd;
        &quot;ProcedureCode&quot;: &quot;W1724&quot;,&#xd;
        &quot;ClientIdentifierOnCall&quot;: &quot;98733222&quot;,&#xd;
        &quot;MobileLogin&quot;: &quot;98733222&quot;,&#xd;
        &quot;CallLatitude&quot;: &quot;40.34455&quot;,&#xd;
        &quot;CallLongitude&quot;: &quot;-21.99383&quot;,&#xd;
        &quot;Location&quot;: &quot;123&quot;,&#xd;
        &quot;TelephonyPIN&quot;: &quot;9989999&quot;,&#xd;
        &quot;OriginatingPhoneNumber&quot;: &quot;2125551212&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;VisitChanges&quot;: [&#xd;
      {&#xd;
        &quot;SequenceID&quot;: &quot;2019110112290682&quot;,&#xd;
        &quot;ChangeMadeBy&quot;: &quot;KMSTest@test.com&quot;,&#xd;
        &quot;ChangeDateTime&quot;: &quot;2019-10-31T13:24:06Z&quot;,&#xd;
        &quot;GroupCode&quot;: &quot;94567&quot;,&#xd;
        &quot;ReasonCode&quot;: &quot;10&quot;,&#xd;
        &quot;ChangeReasonMemo&quot;: &quot;Change Reason Memo 9223&quot;,&#xd;
        &quot;ResolutionCode&quot;: &quot;A&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;VisitExceptionAcknowledgement&quot;: [&#xd;
      {&#xd;
        &quot;ExceptionID&quot;: &quot;01&quot;,&#xd;
        &quot;ExceptionAcknowledged&quot;: &quot;false&quot;&#xd;
      }&#xd;
    ]&#xd;
  },&#xd;
  {&#xd;
    &quot;ProviderIdentification&quot;: {&#xd;
      &quot;ProviderID&quot;: &quot;102802407&quot;,&#xd;
      &quot;ProviderQualifier&quot;: &quot;MedicaidID&quot;&#xd;
    },&#xd;
    &quot;VisitOtherID&quot;: &quot;FNYW0VAPBPCDN8G6AHLH7E2LAASRWC3P2BR8PGV87VDUJQ9D6L&quot;,&#xd;
    &quot;SequenceID&quot;: &quot;2019110112290694&quot;,&#xd;
    &quot;EmployeeIdentifier&quot;: &quot;T2qjKJ&quot;,&#xd;
    &quot;EmployeeQualifier&quot;: &quot;EmployeeCustomID&quot;,&#xd;
    &quot;ClientID&quot;: &quot;447744778&quot;,&#xd;
    &quot;ClientIDQualifier&quot;: &quot;ClientCustomID&quot;,&#xd;
    &quot;VisitCancelledIndicator&quot;: &quot;false&quot;,&#xd;
    &quot;PayerID&quot;: &quot;PAODP&quot;,&#xd;
    &quot;PayerProgram&quot;: &quot;ODP&quot;,&#xd;
    &quot;ProcedureCode&quot;: &quot;W1724&quot;,&#xd;
    &quot;VisitTimeZone&quot;: &quot;US/Eastern&quot;,&#xd;
    &quot;ScheduleStartTime&quot;: &quot;2019-10-31T12:29:06Z&quot;,&#xd;
    &quot;ScheduleEndTime&quot;: &quot;2019-10-31T12:49:06Z&quot;,&#xd;
    &quot;BillVisit&quot;: &quot;true&quot;,&#xd;
    &quot;HoursToBill&quot;: &quot;10&quot;,&#xd;
    &quot;HoursToPay&quot;: &quot;10&quot;,&#xd;
    &quot;Memo&quot;: &quot;ViPerP9B6HGKAKZ4GK75IFYOGE73964FWXP12I7GLTZFOSML2TOPH5P&quot;,&#xd;
    &quot;ClientVerifiedTimes&quot;: &quot;true&quot;,&#xd;
    &quot;ClientVerifiedTasks&quot;: &quot;true&quot;,&#xd;
    &quot;ClientVerifiedService&quot;: &quot;true&quot;,&#xd;
    &quot;ClientSignatureAvailable&quot;: &quot;true&quot;,&#xd;
    &quot;ClientVoiceRecording&quot;: &quot;true&quot;,&#xd;
    &quot;Calls&quot;: [&#xd;
      {&#xd;
        &quot;CallExternalID&quot;: &quot;84234728&quot;,&#xd;
        &quot;CallDateTime&quot;: &quot;2019-10-31T12:39:06Z&quot;,&#xd;
        &quot;CallAssignment&quot;: &quot;Time In&quot;,&#xd;
        &quot;CallType&quot;: &quot;Other&quot;,&#xd;
        &quot;ProcedureCode&quot;: &quot;W1724&quot;,&#xd;
        &quot;ClientIdentifierOnCall&quot;: &quot;98733222&quot;,&#xd;
        &quot;MobileLogin&quot;: &quot;98733222&quot;,&#xd;
        &quot;CallLatitude&quot;: &quot;40.34455&quot;,&#xd;
        &quot;CallLongitude&quot;: &quot;-21.99383&quot;,&#xd;
        &quot;Location&quot;: &quot;123&quot;,&#xd;
        &quot;TelephonyPIN&quot;: &quot;9989999&quot;,&#xd;
        &quot;OriginatingPhoneNumber&quot;: &quot;2125551212&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;CallExternalID&quot;: &quot;62645643&quot;,&#xd;
        &quot;CallDateTime&quot;: &quot;2019-10-31T12:44:06Z&quot;,&#xd;
        &quot;CallAssignment&quot;: &quot;Time Out&quot;,&#xd;
        &quot;CallType&quot;: &quot;Other&quot;,&#xd;
        &quot;ProcedureCode&quot;: &quot;W1724&quot;,&#xd;
        &quot;ClientIdentifierOnCall&quot;: &quot;98733222&quot;,&#xd;
        &quot;MobileLogin&quot;: &quot;98733222&quot;,&#xd;
        &quot;CallLatitude&quot;: &quot;40.34455&quot;,&#xd;
        &quot;CallLongitude&quot;: &quot;-21.99383&quot;,&#xd;
        &quot;Location&quot;: &quot;123&quot;,&#xd;
        &quot;TelephonyPIN&quot;: &quot;9989999&quot;,&#xd;
        &quot;OriginatingPhoneNumber&quot;: &quot;2125551212&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;VisitChanges&quot;: [&#xd;
      {&#xd;
        &quot;SequenceID&quot;: &quot;2019110112290682&quot;,&#xd;
        &quot;ChangeMadeBy&quot;: &quot;KMSTest@test.com&quot;,&#xd;
        &quot;ChangeDateTime&quot;: &quot;2019-10-31T13:24:06Z&quot;,&#xd;
        &quot;GroupCode&quot;: &quot;94567&quot;,&#xd;
        &quot;ReasonCode&quot;: &quot;10&quot;,&#xd;
        &quot;ChangeReasonMemo&quot;: &quot;Change Reason Memo 9223&quot;,&#xd;
        &quot;ResolutionCode&quot;: &quot;A&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;VisitExceptionAcknowledgement&quot;: [&#xd;
      {&#xd;
        &quot;ExceptionID&quot;: &quot;01&quot;,&#xd;
        &quot;ExceptionAcknowledged&quot;: &quot;false&quot;&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">dev-api.sandata.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">interfaces/intake/visits/generic.rest/api/v1.1</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Status Success" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1783789965">&quot;status&quot;: &quot;SUCCESS&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PA - Verify Open EVV Visit  Are Inserted to DB" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Verify records insert to DB" enabled="true">
            <stringProp name="WhileController.condition">${__javaScript(vars.get(&quot;expected&quot;)!=&quot;true&quot; &amp;&amp; parseInt(vars.get(&quot;timeOut&quot;))&gt;0)}</stringProp>
          </WhileController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
              <stringProp name="dataSource">myDatabase</stringProp>
              <stringProp name="query">SELECT count(*) as CountNum FROM stx.VISITS WHERE ACCOUNT = &apos;392528&apos; AND MEMO = &apos;ViPerP9B6HGKAKZ4GK75IFYOGE73964FWXP12I7GLTZFOSML2TOPH5P&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as Object</stringProp>
              <stringProp name="resultVariable">rsClient</stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Verify existing" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.lang.*;

int expectedVisitRecords = Integer.parseInt(vars.get(&quot;expectedVisitRecords&quot;));
int timeout = Integer.parseInt(vars.get(&quot;timeOut&quot;));
timeout--;
vars.put(&quot;timeOut&quot;,timeout.toString());
String result = vars.get(&quot;rsClient&quot;);

log.info(&quot;-----------actualVisitRecords = &quot; + result);


String actualVisitRecords = result.replace(&quot;[{COUNTNUM=&quot;,&quot;&quot;).replace(&quot;}]&quot;,&quot;&quot;);


if(Integer.parseInt(actualVisitRecords)&gt;=expectedVisitRecords)vars.put(&quot;expected&quot;,&quot;true&quot;);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${sleep}</stringProp>
              </ConstantTimer>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Set Ignore Result Status Of This Sampler In Loop" enabled="true">
                <collectionProp name="Asserion.test_strings"/>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Verify DB" enabled="true">
            <stringProp name="BeanShellSampler.query"></stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">String expected = vars.get(&quot;expected&quot;);
String errorMesssage = &quot;Debug -----------&gt; Data is not imported fully to DB: &quot; + &quot; / Actual Client Records :&quot; + vars.get(&quot;actualMemRecords&quot;) + &quot; should be greater or equal Expected Records :&quot;+vars.get(&quot;expectedMemRecords&quot;);
if(expected.equals(&quot;true&quot;)){
		Failure=false;
}
else{
		SampleResult.setResponseCode(&quot;205&quot;);
		Failure=true;
		FailureMessage  = errorMesssage;
    }</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown Thread Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </PostThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="[Tear Down] Remove files after run" enabled="true">
          <stringProp name="BeanShellSampler.query">Runtime.getRuntime().exec(&quot;cmd /c del /f ${initialIdCsvFileName}&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">./TestReport/Import-Visit-SimpleDataWriter-${__time(ddMMyyyy-HHmmss)}.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">D:\NhonNguyen\Automation\Sandata\LoadTest\Client.csv</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
